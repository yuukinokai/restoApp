// Code generated by Umple 1.27.0.3728.d139ed893

digraph "TableState" {
  compound = true;
  size="80,10"

  // Class: Table

    // Top Level StateMachine: status
    
    // Start states are shown as a black circle
    node [shape = point, fillcolor="black", width=0.2 ];
    start_Table_status [ tooltip = "Class Table, SM status, State start" ];
    
        
    // Format for normal states
    node [shape = rectangle, width=1,style=rounded];
    
      // State: Available

      Table_status_Available [label = Available, tooltip = "Class Table, SM status, State Available"];
      // End State: Available

      // State: InUse

     subgraph clusterTable_status_InUse {
      label = "InUse";
      style = rounded;

      // Bottom Level StateMachine: InUse
      
      // Start states are shown as a black circle
      node [shape = point, fillcolor="black", width=0.2 ];
      start_Table_InUse [ tooltip = "Class Table, SM status, State InUse.start" ];
      
            
      // Format for normal states
      node [shape = rectangle, width=1,style=rounded];
      
        // State: Ordering

        Table_statusInUse_Ordering [label = Ordering, tooltip = "Class Table, SM status, State InUse.Ordering"];
        // End State: Ordering

        // State: AllSeatsBilled

        Table_statusInUse_AllSeatsBilled [label = AllSeatsBilled, tooltip = "Class Table, SM status, State InUse.AllSeatsBilled"];
        // End State: AllSeatsBilled
      // End Bottom Level StateMachine: InUse
     }
      // End State: InUse
    // End Top Level StateMachine: status

  // All transitions
    start_Table_status -> Table_status_Available [  tooltip = "start to Available" ] ;
    Table_statusInUse_AllSeatsBilled -> Table_status_Available [  label = "toggleAvailableStatus / {...}", tooltip = "From InUse.AllSeatsBilled to Available on toggleAvailableStatus&#13;Transition Action:
   order = getRestoApp.getCurrentOrder(); do: for(order: aOrder){table = order.getTables();                                                                                                }if(table.contains(table)){getRestoApp.removeCurrentOrder(order)};" ] ;
  
  Table_status_Available -> Table_statusInUse_Ordering [  lhead=clusterTable_status_InUse,  label = "toggleAvailableStatus / {...}", tooltip = "From Available to InUse on toggleAvailableStatus&#13;Transition Action:
   do: addOrder(Order aOrder)" ] ;
  
  start_Table_InUse -> Table_statusInUse_Ordering [  tooltip = "start to InUse.Ordering" ] ;
    Table_statusInUse_Ordering -> Table_statusInUse_Ordering [  label = "addOrder(Order aOrder) / {...}", tooltip = "From InUse.Ordering to InUse.Ordering on addOrder(Order aOrder)&#13;Transition Action:
   order = getRestoApp.addOrder(aOrder); getRestoApp.addCurrentOrder(order);" ] ;
  
  Table_statusInUse_Ordering -> Table_statusInUse_Ordering [  label = "addBill(List<Seat> seats) [Table.numberOfCurrentSeats < seats.length()] / {...}", tooltip = "From InUse.Ordering to InUse.Ordering on addBill(List<Seat> seats)&#13;Guard:  [Table.numberOfCurrentSeats < seats.length()]&#13;Transition Action:
   Bill = aBill do: seats.addBill(aBill)" ] ;
  
  Table_statusInUse_AllSeatsBilled -> Table_statusInUse_Ordering [  label = "addOrder(Order aOrder) / {...}", tooltip = "From InUse.AllSeatsBilled to InUse.Ordering on addOrder(Order aOrder)&#13;Transition Action:
   order = getRestoApp.addOrder(aOrder); getRestoApp.addCurrentOrder(order);" ] ;
  
  Table_statusInUse_Ordering -> Table_statusInUse_AllSeatsBilled [  label = "addBill(List<Seat> seats) / {...}", tooltip = "From InUse.Ordering to InUse.AllSeatsBilled on addBill(List<Seat> seats)&#13;Transition Action:
   Bill = aBill do: seats.addBill(aBill)" ] ;
  

}
