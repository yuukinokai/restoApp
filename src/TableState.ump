class Table {
	status{
		Available {
	        addToOrder(Order aOrder) / {
				addOrder(aOrder);
				getRestoApp().addOrder(aOrder); 
				getRestoApp().addCurrentOrder(aOrder);
	        } -> Ordering;
		}
	
		InUse {
			Ordering {
		        addToOrder(Order aOrder) / {
					addOrder(aOrder);
					getRestoApp().addOrder(aOrder); 
					getRestoApp().addCurrentOrder(aOrder);
		        } -> Ordering;
		        
				payBill(Bill aBill) [!almostAllPaid()] /
				{
					seats.addBill(aBill);
				} ->  Ordering;
		        
				payBill(Bill aBill) [almostAllPaid()] /
				{
					seats.addBill(aBill);
				} ->  AllSeatsBilled;
		        
			}
			AllSeatsBilled {
		        addToOrder(Order aOrder) / {
					addOrder(aOrder);
					getRestoApp().addOrder(aOrder); 
					getRestoApp().addCurrentOrder(aOrder);
		        } -> Ordering;
		        
	          resetTable() / {
	            List<Order> orders = getRestoApp().getCurrentOrders();
	            for(Order order: orders){
	                List <Table> tables = order.getTables();
	                if(tables.contains(this)){
	                  getRestoApp().removeCurrentOrder(order);
	                }
	            }
	          } -> Available;
		        
			}
		}
	}
	
	private Boolean almostAllPaid() {
		// TODO: Check almost everyone has paid.
		return false;
	}
}

